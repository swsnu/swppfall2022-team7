upstream backend {
    server backend:8000;
    keepalive 10;
}

upstream frontend {
    server frontend:3000;
    keepalive 10;
}

#http
server {
    listen 80;
    server_name 52.79.76.13;
    server_tokens off;
    
    # Webroot Certificate Method
    # location ^~ /.well-known/acme-challenge/ {
    #     default_type "text/plain";
    #     root /var/www/certbot;
    # }

    # location = /.well-known/acme-challenge/ {
    #     return 404;
    # }

    # Http로 들어온 요청을 Https로 Redirect
    # location / {
    #     return 301 https://$host$request_uri;
    # }

    location ~ ^/api/ {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        proxy_pass http://backend;
    }

    location / {
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        proxy_pass http://frontend;
    }
}

#https
# server {
#     listen 443 ssl;
#     server_name 52.79.76.13;
#     server_tokens off;
    
#     # TODO: changing URL is needed
#     # ssl_certificate /etc/letsencrypt/live/www.divocorp.kr/fullchain.pem;
#     # ssl_certificate_key /etc/letsencrypt/live/www.divocorp.kr/privkey.pem;

#     location ~ ^/api/(.*) {
#         proxy_pass http://backend/$1;
#         proxy_buffer_size          128k;
#         proxy_buffers              4 256k;
#         proxy_busy_buffers_size    256k;
#         proxy_ssl_session_reuse off;
#     }

#     location / {
#         proxy_pass http://frontend;
#         proxy_buffer_size          128k;
#         proxy_buffers              4 256k;
#         proxy_busy_buffers_size    256k;
#         proxy_ssl_session_reuse off;
#     }
# }